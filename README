"Gustav's Fairyland" is a simple puzzle game on time where the player has to choose the right clip to construct a custom fairytale.

Contact: tamino@cdauth.eu

Compilation instructions:
Create a binary directory and run:
cmake <path to fairytale folder>

Now compile everything in the binary directory:
make -j4

For Linux:
Just use cpack in the build directory:
cpack .

It creates an RPM and a DEB package.

On Windows 7 the program has been compiled using the MinGW distributed with Qt.
The shell path in CMake has to stay clear.
Unfortunately there is only a 32 Bit compiler.
Generator: Code Blocks - MinGW Makefiles
CPack creates an NSIS based Windows installer.

For Android:
Download SDK and NDK.
Use the corresponding CMake module.
Add the path to "android" to your PATH ./Android/Sdk/tools/

Use the following CMake modules for Android deployment:
https://github.com/taka-no-me/android-cmake
https://github.com/LaurentGomila/qt-android-cmake/

There is a Bash script "buildandroid.sh" which does everything as long a virtual Android device is installed properly
and the paths are correct.

The program zipalign might not be found for signing the app.
It is in /home/tamino/Android/Sdk/build-tools/24.0.1/zipalign but expected in
/home/tamino/Android/Sdk/build-tools/zipalign
Just do:
ln -s /home/tamino/Android/Sdk/build-tools/24.0.1/zipalign /home/tamino/Android/Sdk/build-tools/zipalign

The Android build uses QtAV for playing videos on Android devices since QtMultimediaWidgets are not supported on Android.
Therefore ffmpeg and QtAV have to build for Android too which happens in the build script "buildatavforandroid.sh".

Use the following command to get debugging output:
/home/tamino/Android/Sdk/platform-tools/adb logcat

Android does not support multimedia widgets in C++ like QVideoWidget. Therefore QML has to be used
to show videos:
http://doc.qt.io/qt-5/qtqml-cppintegration-interactqmlfromcpp.html

https://wiki.qt.io/How-to-debug-Qt-applications-on-Android-device

Make sure the codec is supported on Android:
https://developer.android.com/guide/appendix/media-formats.html

Audio compression:
Run the Bash script "compressaudio.sh".

Video compression:
Run the Bash script "compressvideos.sh" and make sure it creates videos which can be played on Android as well.

Set the option USE_COMPRESSED_FILES in CMake and it will install the compressed files instead.
